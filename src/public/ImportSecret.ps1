<#
.SYNOPSIS
Imports secrets from a backup file into a specified vault.

.DESCRIPTION
This function imports secrets from a backup file (generated by same module) into a specified vault. It checks if the secret already exists in the vault and either adds it or updates it based on the OverWrite switch parameter.

.PARAMETER VaultName
The name of the vault where the secrets will be imported.

.PARAMETER BackupFile
The path to the backup file containing the secrets to be imported.

.PARAMETER OverWrite
A switch parameter that specifies whether existing secrets in the vault should be overwritten if they already exist.

.EXAMPLE
Import-Secret -VaultName "MyVault" -BackupFile "C:\Path\to\backup.json" -OverWrite
Imports secrets from the specified backup file into the "MyVault" vault, overwriting existing secrets if they already exist.
#>
function Import-Secret {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory)]
        [string]
        $VaultName,
        [Parameter(Mandatory)]
        [string]
        $BackupFile,
        [switch]
        $OverWrite
    )
    Test-VaultAccess -VaultName $VaultName

    #TODO Test JSON Syntax

    $JSONData = Get-Content -Path $BackupFile -Raw | ConvertFrom-Json
    foreach ($Secret in $JSONData) {
        if (Get-SecretInfo -Vault $VaultName -Name $Secret.Name) {
            $SecretExists = $true
        } else {
            $SecretExists = $false
        }
        if (-not $SecretExists -or $OverWrite) {
            if ($Secret.Type -eq 'String' -or $Secret.Type -eq 'SecureString') {
                Set-Secret -Vault $VaultName -Name $Secret.Name -Secret $Secret.Secret
            } elseif ($Secret.Type -eq 'PSCredential') {
                $username = $Secret.Secret.UserName
                $password = $Secret.Secret.Password | ConvertTo-SecureString -AsPlainText
                $credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $username, $password
                Set-Secret -Vault $VaultName -Name $Secret.Name -Secret $credential
            }
        }
    }
}